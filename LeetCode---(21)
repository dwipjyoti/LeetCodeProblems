/* Merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists */

/************************************
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode list=new ListNode();
       
        ListNode head;  // head should be taken so that it stores the list
        head=list;      // becoz on return time we need to return head.next  "otherwise" if you return list then you will only get the current list
                        // dont return head becoz head has a value=0 bydefault
        
        while(l1 !=null && l2 != null){ //Dont use---"L1.next != null"____as then at last node it will create problem
            if(l1.val<=l2.val){
                list.next=l1;//assign the node to list
                l1=l1.next;//assign list l1 with next node
            }
            else{
                list.next=l2;
                l2=l2.next;
            }
            
            list=list.next;//list set to next node___so that in next iteration we can assign node to the list
        }
        if(l1 !=null){
            list.next=l1;
        }
        if(l2 != null){
            list.next=l2;
        }
               
        
        return head.next;
        //on return if there was no head then you will return the list but the current list will contain the last value only
    }
}
